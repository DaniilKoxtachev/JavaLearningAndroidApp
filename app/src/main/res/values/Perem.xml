<?xml version="1.0" encoding="utf-8"?>
<resources>
    <string name="perem_item_1">
       <![CDATA[ При объявлении переменной, в следующей последовательности указываются:<br><br>
        1)<b>Тип данных</b> (в данном примере — int — переменная содержит целое число)<br><br>
        2)<b>Имя переменной</b> (в данном примере имена — x и y)<br><br>
        3)<b>Начальное значение переменной</b> или,другими словами, инициализация переменной.]]>
    </string>

    <string name="perem_item_2">
       <![CDATA[
       <b>1)</b>Имя переменной должно начинаться с буквы (маленькой) и состоять из букв (Unicode) цифр и символа подчеркивания «_».<br><br>
        Технически возможно начать имя переменной также с «$» или «_», однако это запрещено соглашением по оформлению кода в Java
        (Java Code Conventions).<br><br> Кроме того, символ доллара <b>«$»</b>, по соглашению, никогда не используется вообще.<br><br>
        В соответствии с соглашением имя переменной должно начинаться именно с маленькой буквы (с заглавной буквы начинаются имена классов).<br><br>
        Пробелы при именовании переменных не допускаются.<br><br>

        <b>2)</b>Имя переменной не должно быть ключевым или зарезервированным словом языка Java.<br><br>

        <b>3)</b>Имя переменной чувствительно к регистру.  newVariable и newvariable — разные имена.<br><br>

       <b> 4)</b>При выборе имени переменных, следует использовать полные слова вместо загадочных аббревиатур.<br><br>
        Это сделает ваш код более удобным для чтения и понимания.<br><br>
        Во многих случаях это также сделает ваш код самодокументируемым.<br><br>

       <b> 5)</b>Если выбранное вами имя переменной состоит только из одного слова — запишите его маленькими буквами.<br><br>
        Если оно состоит из более чем одного слова, то отделяйте каждое последующее слово в имени переменной заглавной буквой.<br><br>
        Например: <b>superCounter, myDomesticAnimal</b><br><br>

        <b>6)</b>Если переменная сохраняет постоянное значение, то каждое слово следует писать заглавными буквами и отделять при помощи символа
        подчеркивания.]]>
    </string>

    <string name="perem_item_3">
       <![CDATA[  В ссылочные типы входят все классы, интерфейсы, массивы.<br><br>
        Описанный выше тип String также относится к ссылочным типам. Этот класс из стандартной библиотеки Java.<br><br>
        Также существуют классы-оболочки:<br><br>
         <b>Byte</b><br>
        <b> Short</b><br>
        <b> Integer</b><br>
        <b> Long</b><br>
       <b> Float</b><br>
        <b>Double</b><br>
      <b>  Character</b><br>
        <b>Boolean</b><br>

        <br><br>
        В отличие от примитивных типов, они пишутся с заглавной буквы.<br><br>
        Эти типы соответствуют примитивным типам, однако являются ссылочными.<br><br>
        Их классы cодержат методы для преобразования типов, а также другие константы и методы полезные при работе с примитивными типами данных.]]>
    </string>

    <string name="perem_item_4">
       <![CDATA[ <b>byte</b> — диапазон допустимых значений от -128 до 127<br><br>
        Переменные типа byte полезны при работе с  потоком данных, который поступает из сети или файла.]]>
    </string>

    <string name="perem_item_5">
        <![CDATA[<b>short</b> — диапазон допустимых значений от -32768 до 32767]]>
    </string>

    <string name="perem_item_6">
        <![CDATA[ <b>int</b> — диапазон допустимых значений от -2147483648 до 2147483647<br><br>
        Тип int используется чаще при работе с целочисленными данными, нежели byte и short, даже если их диапазона хватает.<br><br>
        Это происходит потому, что при указании значений типа  byte и short  в выражениях, их тип все равно автоматически  повышается до int
        при вычислении.]]>
    </string>

    <string name="perem_item_7">
        <![CDATA[<b>long</b> — диапазон допустимых значений от -9223372036854775808 до 9223372036854775807<br><br>
        Этот тип удобен для работы с большими целыми числами.]]>
    </string>

    <string name="perem_item_8">
        <![CDATA[<b>float</b> — диапазон допустимых значений от ~1,4*10-45 до ~3,4*1038<br><br>
        Этот тип удобен для использования, когда не требуется особой точности в дробной части числа.]]>
    </string>

    <string name="perem_item_9">
       <![CDATA[ <b>double</b> — диапазон допустимых значений от ~4,9*10-324  до ~1,8*10308<br><br>
        Математические функции такие как sin(), cos(), sqrt() возвращают значение double]]>
    </string>

    <string name="perem_item_10">
     <![CDATA[  <b>char</b> — символьный тип данных представляет собой один 16-битный Unicode символ.<br><br>
        Он имеет минимальное значение  (или 0), и максимальное значение  (или 65535 включительно).<br><br>
        Символы char  можно задавать также при помощи соответствующих чисел.]]>
    </string>

    <string name="perem_item_11">
    <![CDATA[<b>boolean</b> — предназначен для хранения логических значений.<br><br>
    Переменные этого типа могут принимать только одно из 2х возможных значений true или false.]]>
    </string>

    <string name="perem_item_12">
        <![CDATA[<b>Тип String</b> не является примитивным типом данных, однако это один из наиболее используемых типов в Java.<br><br>
        String  предназначен для хранения строк текста. Несколько примеров использования String<br><br>
        Их классы cодержат методы для преобразования типов, а также другие константы и методы полезные при работе с примитивными типами данных.]]>
    </string>
</resources>