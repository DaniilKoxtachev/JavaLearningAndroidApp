<?xml version="1.0" encoding="utf-8"?>
<resources>
    <string name="jdbc_item_1">
   <![CDATA[ <b> JDBC, Java DataBase Connectivity (соединение с базами данных на Java)</b>  — промышленный стандарт взаимодействия Java-приложений с различными СУБД.<br> Реализован в виде пакета <b>java.sql</b>, входящего в состав Java SE.<br><br>

<b>JDBC</b> основан на концепции драйверов, которые позволяют получать соединение с базой данных по специально описанному URL.<br> При загрузке драйвер регистрирует себя в системе и в дальнейшем автоматически вызывается, когда программа требует URL, содержащий протокол, за который этот драйвер отвечает.<br><br>]]>
    </string>
    <string name="jdbc_item_2">
     <![CDATA[   Преимуществами JDBC считают:<br>

<b>1)</b>Лёгкость разработки: разработчик может не знать специфики базы данных, с которой работает;<br><br>
<b>2)</b>Код практически не меняется, если компания переходит на другую базу данных (количество изменений зависит исключительно от различий между диалектами SQL);<br><br>
<b>3)</b>Не нужно дополнительно устанавливать клиентскую программу;<br><br>
<b>4)</b>К любой базе данных можно подсоединиться через легко описываемый URL.<br><br>]]>
    </string>
    <string name="jdbc_item_3">
    <![CDATA[     JDBC URL состоит из:<br>

<b>protocol: (протокола) </b>- всегда jdbc: .<br><br>
<b>subprotocol: (подпротокола)</b> - это имя драйвера или имя механизма соединения с базой данных.<br> Подпротокол может поддерживаться одним или несколькими драйверами. <br>Лежащий на поверхности пример подпротокола - это "odbc", отведенный для URL, обозначающих имя источника данных ODBC.<br> В случае необходимости использовать сервис имен (т.е. имя базы данных в JDBC URL не будет действительным именем базы данных), то подпротоколом может выступать сервис имен.<br><br>
<b>subname (подимени) </b>- это идентификатор базы данных. Значение подимени может менятся в зависимости от подпротокола, и может также иметь под-подимя с синтаксисом, определяемым разработчиком драйвера. <br> Назначение подимени - это предоставление всей информации, необходимой для поиска базы данных. Например, если база данных находится в Интернет, то в состав подимени JDBC URL должен быть включен сетевой адрес.<br><br>
        Пример JDBC URL для подключения к MySQL базе данных «Test» расположенной по адресу localhost и ожидающей соединений по порту 3306:<b> jdbc:mysql://localhost:3306/Test]]</b><br><br>]]>
    </string>
    <string name="jdbc_item_4">
     <![CDATA[    JDBC состоит из двух частей:<br>

<b>JDBC API</b>, который содержит набор классов и интерфейсов, определяющих доступ к базам данных.<br> Эти классы и методы объявлены в двух пакетах - <b>java.sql и javax.sql</b>;<br><br>
<b>JDBC-драйвер</b>, компонент, специфичный для каждой базы данных.<br><br>
JDBC превращает вызовы уровня API в «родные» команды того или иного сервера баз данных.<br><br>]]>
    </string>
    <string name="jdbc_item_5">
         <![CDATA[
<b>java.sql.DriverManager</b> - позволяет загрузить и зарегистрировать необходимый JDBC-драйвер, а затем получить соединение с базой данных.<br><br>

<b>javax.sql.DataSource </b>- решает те же задачи, что и <b>DriverManager,</b> но более удобным и универсальным образом. Существуют также <b>javax.sql.ConnectionPoolDataSource и javax.sq1.XADataSource </b>задача которых - обеспечение поддержки пула соединений.<br><br>

<b>java.sql.Connection </b>- обеспечивает формирование запросов к источнику данных и управление транзакциями. Также предусмотрены интерфейсы <b>javax.sql.PooledConnection и javax.sql.XAConnection</b>.<br><br>

<b>java.sql.Statement , java.sql.PreparedStatement и java.sql.CallableStatement </b>- эти интерфейсы позволяют отправить запрос к источнику данных.<br><br>

<b>java.sql.ResultSet </b>- объявляет методы, которые позволяют перемещаться по набору данных и считывать значения отдельных полей в текущей записи.<br><br>

<b>java.sql.ResultSetMetaData</b> - позволяет получить информацию о структуре набора данных.<br><br>

<b>java.sql.DatabaseMetaData</b> - позволяет получить информацию о структуре источника данных.<br><br>]]>
    </string>
    <string name="jdbc_item_6">
          <![CDATA[
      <b> 1)</b> Регистрация драйверов;<br><br>
<b>2)</b>Установление соединения с базой данных;<br><br>
<b>3)</b>Создание запроса(ов) к базе данных;<br><br>
<b>4)</b>Выполнение запроса(ов) к базе данных;<br><br>
<b>5)</b>Обработка результата(ов);<br><br>
<b>6)</b>Закрытие соединения с базой данных.<br><br>]]>
    </string>
    <string name="jdbc_item_7">
         <![CDATA[
Регистрацию драйвера можно осуществить несколькими способами:<br><br>

<b>java.sql.DriverManager.registerDriver(%объект класса драйвера%)</b>.<br><br>

<b>Class.forName(«полное имя класса драйвера»).newInstance()</b>.<br><br>

<b>Class.forName(«полное имя класса драйвера»)</b>;<br><br>]]>
    </string>
    <string name="jdbc_item_8">
        <![CDATA[
Для выполнения запросов к базе данных в Java используются три интерфейса:<br>

<b>java.sql.Statement </b>- для операторов SQL без параметров;<br><br>
<b>java.sql.PreparedStatement</b> - для операторов SQL с параметрами и часто выполняемых операторов;<br><br>
<b>java.sql.CallableStatement</b> - для исполнения хранимых в базе процедур.<br><br>
Объекты-носители интерфейсов создаются при помощи методов объекта <b>java.sql.Connection</b>:<br>

<b>java.sql.createStatement()</b> возвращает объект Statement;<br><br>
<b>java.sql.prepareStatement() </b>возвращает объект PreparedStatement;<br><br>
<b>java.sql.prepareCall()</b> возвращает объект CallableStatement;<br><br>]]>
    </string>
    <string name="jdbc_item_9">
        <![CDATA[
Выполнение запросов осуществляется при помощи вызова методов объекта, реализующего интерфейс <b>java.sql.Statement</b>:<br>

<b>executeQuery()</b> - для запросов, результатом которых является один набор значений, например запросов<b>SELECT</b>.<br> Результатом выполнения является объект класса <b>java.sql.ResultSet</b>;<br><br>

<b>executeUpdate()</b> - для выполнения операторов <b>INSERT, UPDATE или DELETE</b>, а также для операторов <b>DDL (Data Definition Language</b>). <br>Метод возвращает целое число, показывающее, сколько записей было модифицировано;<br><br>

<b>execute()</b> – исполняет SQL-команды, которые могут возвращать различные результаты.<br> Например, может использоваться для операции<b> CREATE TABLE</b>.<br> Возвращает true, если первый результат содержит <b>ResultSet и false</b>, если первый результат - это количество модифицированных записей или результат отсутствует.<br> Чтобы получить первый результат необходимо вызвать метод <b>getResultSet() или getUpdateCount()</b>.<br> Остальные результаты доступны через вызов<b> getMoreResults()</b>, который при необходимости может быть произведён многократно.<br><br>

Объект с интерфейсом <b>java.sql.ResultSet </b>хранит в себе результат запроса к базе данных - некий набор данных, внутри которого есть курсор, указывающий на один из элементов набора данных - текущую запись.

Используя курсор можно перемещаться по набору данных при помощи метода next().<br><br>]]>
    </string>
    <string name="jdbc_item_10">
       <![CDATA[ Соединение с базой данной закрывается вызовом метода<b> close()</b> у соответствующего объекта<b> java.sql.Connection </b>или посредством использования механизма <b>try-with-resources</b> при создании такого объекта, появившегося в Java 7.]]>
    </string>
</resources>