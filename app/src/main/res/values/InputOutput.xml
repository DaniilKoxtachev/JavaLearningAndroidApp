<?xml version="1.0" encoding="utf-8"?>
<resources>
    <string name="potok_item_1">
     <![CDATA[  <b> Java IO (input-output)</b> является потокоориентированным, а <b>Java NIO (new/non-blocking io)</b> – буфер-ориентированным.<br> Потокоориентированный ввод/вывод подразумевает чтение/запись из потока/в поток одного или нескольких байт в единицу времени поочередно.<br> Данная информация нигде не кэшируются.<br> Таким образом, невозможно произвольно двигаться по потоку данных вперед или назад.<br> В Java NIO данные сначала считываются в буфер, что дает больше гибкости при обработке данных.<br><br>
Потоки ввода/вывода в Java IO являются блокирующими.<br> Это значит, что когда в потоке выполнения вызывается read() или write() метод любого класса из пакета java.io.*, происходит блокировка до тех пор, пока данные не будут считаны или записаны.<br> Поток выполнения в данный момент не может делать ничего другого.<br> Неблокирующий режим Java NIO позволяет запрашивать считанные данные из канала (channel) и получать только то, что доступно на данный момент, или вообще ничего, если доступных данных пока нет.<br> Вместо того, чтобы оставаться заблокированным пока данные не станут доступными для считывания, поток выполнения может заняться чем-то другим. <br>Тоже самое справедливо и для неблокирующего вывода.<br> Поток выполнения может запросить запись в канал некоторых данных, но не дожидаться при этом пока они не будут полностью записаны.<br><br>
В Java NIO имеются селекторы, которые позволяют одному потоку выполнения мониторить несколько каналов ввода.<br> Т.е. существует возможность зарегистрировать несколько каналов с селектором, а потом использовать один поток выполнения для обслуживания каналов, имеющих доступные для обработки данные, или для выбора каналов, готовых для записи.<br><br>]]>
    </string>
    <string name="potok_item_2">
     <![CDATA[  <b> Каналы и селекторы: </b>NIO поддерживает различные типы каналов.<br> Канал является абстракцией объектов более низкого уровня файловой системы (например, отображенные в памяти файлы и блокировки файлов), что позволяет передавать данные с более высокой скоростью.<br> Каналы не блокируются и поэтому Java предоставляет еще такие инструменты, как селектор, который позволяет выбрать готовый канал для передачи данных, и сокет, который является инструментом для блокировки.<br><br>
<b>Буферы:</b> имеет буферизация для всех классов-обёрток примитивов (кроме Boolean).<br> Появился абстрактный класс Buffer, который предоставляет такие операции, как clear, flip, mark и т.д.<br> Его подклассы предоставляют методы для получения и установки данных.<br><br>
<br>Кодировки:</b> появились кодеры и декодеры для отображения байт и символов Unicode.<br>]]>
    </string>
    <string name="potok_item_3">
       <![CDATA[ <b> Каналы (channels)</b> – это логические (не физические) порталы, абстракции объектов более низкого уровня файловой системы (например, отображенные в памяти файлы и блокировки файлов), через которые осуществляется ввод/вывод данных, а буферы являются источниками или приёмниками этих переданных данных.<br> При организации вывода, данные, которые необходимо отправить, помещаются в буфер, который затем передается в канал.<br> При вводе, данные из канала помещаются в заранее предоставленный буфер.<br><br>

Каналы напоминают трубопроводы, по которым эффективно транспортируются данные между буферами байтов и сущностями по ту сторону каналов.<br> <b> Каналы</b> – это шлюзы, которые позволяют получить доступ к сервисам ввода/вывода операционной системы с минимальными накладными расходами, а буферы – внутренние конечные точки этих шлюзов, используемые для передачи и приема данных.<br>]]>
    </string>
    <string name="potok_item_4">
     <![CDATA[   Разделяют два вида потоков ввода/вывода:<br><br>

<b>Байтовые</b> - java.io.InputStream, java.io.OutputStream;<br><br>
<b>Символьные</b> - java.io.Reader, java.io.Writer.]]>
    </string>
    <string name="potok_item_5">
     <![CDATA[   <b>InputStream</b> - абстрактный класс, описывающий поток ввода;<br><br>
<b>BufferedInputStream</b> - буферизованный входной поток;<br><br>
<b>ByteArrayInputStream</b> позволяет использовать буфер в памяти (массив байтов) в качестве источника данных для входного потока;<br><br>
<b>DataInputStream </b>- входной поток для байтовых данных, включающий методы для чтения стандартных типов данных Java;<br><br>
<b>FileInputStream</b> - входной поток для чтения информации из файла;<br><br>
<b>FilterInputStream </b>- абстрактный класс, предоставляющий интерфейс для классов-надстроек, которые добавляют к существующим потокам полезные свойства;<br><br>
<b>ObjectInputStream </b>- входной поток для объектов;<br><br>
<b>StringBufferInputStream</b> превращает строку (String) во входной поток данных InputStream;<br><br>
<b>PipedInputStream</b> реализует понятие входного канала;<br><br>
<b>PushbackInputStream</b> - разновидность буферизации, обеспечивающая чтение байта с последующим его возвратом в поток, позволяет «заглянуть» во входной поток и увидеть, что оттуда поступит в следующий момент, не извлекая информации.<br><br>
<b>SequenceInputStream </b>используется для слияния двух или более потоков InputStream в единый.<br><br>]]>
    </string>
    <string name="potok_item_6">
<![CDATA[   Разновидность буферизации, обеспечивающая чтение байта с последующим его возвратом в поток.<br> Класс <b>PushbackInputStream</b> представляет механизм «заглянуть» во входной поток и увидеть, что оттуда поступит в следующий момент, не извлекая информации.<br><br>

У класса есть дополнительный метод <b>unread()</b>.]]>
    </string>
    <string name="potok_item_7">
     <![CDATA[   Класс <b>SequenceInputStream</b> позволяет сливать вместе несколько экземпляров класса<b> InputStream.</b>.<br>Конструктор принимает в качестве аргумента либо пару объектов класса<b> InputStream</b>, либо интерфейс Enumeration.<br><br>

Во время работы класс выполняет запросы на чтение из первого объекта класса <b>InputStream</b> и до конца, а затем переключается на второй.<br> При использовании интерфейса работа продолжится по всем объектам класса <b>InputStream</b>. <br> По достижении конца, связанный с ним поток закрывается.<br> Закрытие потока, созданного объектом класса<b> SequenceInputStream</b>, приводит к закрытию всех открытых потоков.<br><br>]]>
    </string>
    <string name="potok_item_8">
         <![CDATA[
<b>OutputStream</b>  - это абстрактный класс, определяющий потоковый байтовый вывод;<br><br>
<b>BufferedOutputStream</b>  - буферизированный выходной поток;<br><br>
<b>ByteArrayOutputStream</b>  - все данные, посылаемые в этот поток, размещаются в предварительно созданном буфере;<br><br>
<b>DataOutputStream</b>  - выходной поток байт, включающий методы для записи стандартных типов данных Java;<br><br>
<b>FileOutputStream</b>  - запись данных в файл на физическом носителе;<br><br>
<b>FilterOutputStream</b>  - абстрактный класс, предоставляющий интерфейс для классов-надстроек, которые добавляют к существующим потокам полезные свойства;<br><br>
<b>PrintStream</b>  - выходной поток, включающий методы print() и println();<br><br>
<b>ObjectOutputStream</b>  - выходной поток для записи объектов;<br><br>
<b>PipedOutputStream</b> реализует понятие выходного канала.<br><br>]]>
    </string>
    <string name="potok_item_9">
         <![CDATA[
        <b>Reader</b> - абстрактный класс, описывающий символьный ввод;<br><br>
<b>BufferedReader </b>- буферизованный входной символьный поток;<br><br>
<b>CharArrayReader</b> - входной поток, который читает из символьного массива;<br><br>
<b>FileReader</b> - входной поток, читающий файл;<br><br>
<b>FilterReader </b>- абстрактный класс, предоставляющий интерфейс для классов-надстроек;<br><br>
<b>InputStreamReader</b>- входной поток, транслирующий байты в символы;<br><br>
<b>LineNumberReader</b> - входной поток, подсчитывающий строки;<br><br>
<b>PipedReader</b> - входной канал;<br><br>
<b>PushbackReader</b> - входной поток, позволяющий возвращать символы обратно в поток;<br><br>
<b>StringReader</b> - входной поток, читающий из строки.<br><br>]]>
    </string>
    <string name="potok_item_10">
         <![CDATA[
<b>Writer</b> - абстрактный класс, описывающий символьный вывод;<br><br>
<b>BufferedWriter</b> - буферизованный выходной символьный поток;<br><br>
<b>CharArrayWriter </b>- выходной поток, который пишет в символьный массив;<br><br>
<b>FileWriter</b> - выходной поток, пишущий в файл;<br><br>
<b>FilterWriter</b> - абстрактный класс, предоставляющий интерфейс для классов-надстроек;<br><br>
<b>OutputStreamWriter</b> - выходной поток, транслирующий байты в символы;<br><br>
<b>PipedWriter</b> - выходной канал;<br><br>
<b>PrintWriter </b>- выходной поток символов, включающий методы print() и println();<br><br>
<b>StringWriter</b> - выходной поток, пишущий в строку;<br><br>]]>
    </string>
    <string name="potok_item_11">
<![CDATA[ Прежде всего, в классе<b> PrintWriter</b> применен усовершенствованный способ работы с символами Unicode и другой механизм буферизации вывода: в классе <b>PrintStream</b> буфер вывода сбрасывался всякий раз, когда вызывался метод print() или println(), а при использовании класса<b> PrintWriter</b> существует возможность отказаться от автоматического сброса буферов, выполняя его явным образом при помощи метода flush().<br><br>

Кроме того, методы класса <b>PrintWriter</b> никогда не создают исключений.<br> Для проверки ошибок необходимо явно вызвать метод checkError().]]>
    </string>
    <string name="potok_item_12">
        <![CDATA[
<b>InputStream и его наследники </b>- совокупность для получения байтовых данных из различных источников;<br><br>
<b>OutputStream и его наследники</b> - набор классов, определяющих потоковый байтовый вывод;<br><br>
<b>Reader и его наследники</b> определяют потоковый ввод символов Unicode;<br><br>
<b>Writer и его наследники</b> определяют потоковый вывод символов Unicode.<br><br>]]>
    </string>
    <string name="potok_item_13">
         <![CDATA[
       <b> boolean createNewFile()</b>: делает попытку создать новый файл;<br><br>
<b>boolean delete()</b>: делает попытку удалить каталог или файл;<br><br>
<b>boolean mkdir()</b>: делает попытку создать новый каталог;<br><br>
<b>boolean renameTo(File dest)</b>: делает попытку переименовать файл или каталог;<br><br>
<b>boolean exists()</b>: проверяет, существует ли файл или каталог;<br><br>
<b>String getAbsolutePath()</b>: возвращает абсолютный путь для пути, переданного в конструктор объекта;<br><br>
<b>String getName()</b>: возвращает краткое имя файла или каталога;<br><br>
<b>String getParent()</b>: возвращает имя родительского каталога;<br><br>
<b>boolean isDirectory()</b>: возвращает значение true, если по указанному пути располагается каталог;<br><br>
<b>boolean isFile()</b>: возвращает значение true, если по указанному пути находится файл;<br><br>
<b>boolean isHidden()</b>: возвращает значение true, если каталог или файл являются скрытыми;<br><br>
<b>long length()</b>: возвращает размер файла в байтах;<br><br>
<b>long lastModified()</b>: возвращает время последнего изменения файла или каталога;<br><br>
<b>String[] list()</b>: возвращает массив файлов и подкаталогов, которые находятся в определенном каталоге;<br><br>
<b>File[] listFiles()</b>: возвращает массив файлов и подкаталогов, которые находятся в определенном каталоге.<br><br>]]>
    </string>
    <string name="potok_item_14">
       <![CDATA[ Интерфейс<b> FileFilter</b> применяется для проверки, попадает ли объект <b>File</b> под некоторое условие.<br> Этот интерфейс содержит единственный метод <b>boolean accept(File pathName)</b>. <br>Этот метод необходимо переопределить и реализовать.]]>
    </string>
</resources>