<?xml version="1.0" encoding="utf-8"?>
<resources>
    <string name="core_item_1">
      <![CDATA[ <b> JVM, Java Virtual Machine (Виртуальная машина Java)</b> — основная часть среды времени исполнения Java (JRE).<br><br>
        Виртуальная машина Java исполняет<b> байт-код Java</b>, предварительно созданный из исходного текста Java-программы компилятором Java.<br><br>
        JVM может также использоваться для выполнения программ, написанных на других языках программирования.<br><br>

        <b>JRE, Java Runtime Environment (Среда времени выполнения Java)</b> - минимально-необходимая реализация виртуальной машины для исполнения
        Java-приложений.<br>Состоит из JVM и стандартного набора библиотек классов Java.<br><br>

        <b>JDK, Java Development Kit (Комплект разработки на Java)</b> - JRE и набор инструментов разработчика приложений на языке Java,
        включающий в себя компилятор Java, стандартные библиотеки классов Java, примеры, документацию, различные утилиты.<br><br>

        <b>Коротко:</b> JDK - среда для разработки программ на Java, включающая в себя JRE - среду для обеспечения запуска Java программ,
        которая в свою очередь содержит JVM - интерпретатор кода Java программ.]]>
    </string>

    <string name="core_item_2">
      <![CDATA[  <b>private (приватный)</b>: члены класса доступны только внутри класса. <br>Для обозначения используется служебное слово private.<br><br>

        <b>default, package-private, package level (доступ на уровне пакета)</b>: видимость класса/членов класса только внутри пакета.<br>
        Является модификатором доступа по умолчанию - специальное обозначение не требуется.<br><br>

        <b>protected (защищённый)</b>: члены класса доступны внутри пакета и в наследниках.<br> Для обозначения используется служебное слово protected.<br><br>

       <b> public (публичный)</b>: класс/члены класса доступны всем.<br> Для обозначения используется служебное слово public.<br><br>

        Последовательность модификаторов по возрастанию уровня закрытости: public, protected, default, private.]]>
    </string>

    <string name="core_item_3">
     <![CDATA[    Модификатор final может применяться к переменным, параметрам методов, полям и методам класса или самим классам.

        Класс не может иметь наследников;<br><br>
        Метод не может быть переопределен в классах наследниках;<br><br>
        Поле не может изменить свое значение после инициализации;<br><br>
        Параметры методов не могут изменять своё значение внутри метода;<br><br>
        Локальные переменные не могут быть изменены после присвоения им значения.]]>
    </string>

    <string name="core_item_4">
     <![CDATA[   <b>Метод main()</b> — точка входа в программу.<br> В приложении может быть несколько таких методов.<br> Если метод отсутствует,
        то компиляция возможна, но при запуске будет получена ошибка <b>`Error: Main method not found`</b>.<br>]]>
    </string>

    <string name="core_item_5">
     <![CDATA[   Класс, помеченный модификатором <b>abstract</b>, называется абстрактным классом.<br>
        Такие классы могут выступать только предками для других классов.<br>
        Создавать экземпляры самого абстрактного класса не разрешается.<br>
        При этом наследниками абстрактного класса могут быть как другие абстрактные классы, так и классы, допускающие создание объектов.<br><br>

        Метод, помеченный ключевым словом<b> abstract - абстрактный метод</b>, т.е. метод, который не имеет реализации.<br>
        Если в классе присутствует хотя бы один абстрактный метод, то весь класс должен быть объявлен абстрактным.<br><br>

        Использование абстрактных классов и методов позволяет описать некий шаблон объекта, который должен быть реализован в других классах.<br>
        В них же самих описывается лишь некое общее для всех потомков поведение.<br><br>]]>
    </string>

    <string name="core_item_6">
    <![CDATA[    Ключевое слово <b>interface </b>используется для создания полностью абстрактных классов.<br>
        <b>Основное предназначение интерфейса</b> - определять каким образом мы можем использовать класс, который его реализует.<br><br>
        Создатель интерфейса определяет имена методов, списки аргументов и типы возвращаемых значений, но не реализует их поведение.<br> Все методы неявно объявляются как public.<br><br>

        Начиная с Java 8 в интерфейсах разрешается размещать реализацию методов по умолчанию <b>default</b> и статических <b>static</b> методов.<br><br>

        Интерфейс также может содержать и поля.<br> В этом случае они автоматически являются публичными <b>public</b>,
        статическими <b>static</b> и неизменяемыми <b>final</b>.]]>
    </string>

    <string name="core_item_7">
     <![CDATA[    В Java класс может одновременно реализовать несколько интерфейсов, но наследоваться только от одного класса.<br><br>

        Абстрактные классы используются только тогда, когда присутствует тип отношений <b>«is a» (является)</b>.<br>
        Интерфейсы могут реализоваться классами, которые не связаны друг с другом.<br><br>

        <b>Абстрактный класс</b> - средство, позволяющее избежать написания повторяющегося кода,
        инструмент для частичной реализации поведения. <br><br><b>Интерфейс</b> - это средство выражения семантики класса, контракт,
        описывающий возможности.<br><br> Все методы интерфейса неявно объявляются как public abstract или (начиная с Java 8) default -
        методами с реализацией по-умолчанию, а поля - public static final.<br><br>

        Интерфейсы позволяют создавать структуры типов без иерархии.<br>

        Наследуясь от абстрактного, класс «растворяет» собственную индивидуальность.<br> Реализуя интерфейс, он расширяет собственную
        функциональность.<br><br>

        Абстрактные классы содержат частичную реализацию, которая дополняется или расширяется в подклассах.<br>
        При этом все подклассы схожи между собой в части реализации, унаследованной от абстрактного класса, и
        отличаются лишь в части собственной реализации абстрактных методов родителя.<br><br>Поэтому абстрактные классы применяются в случае
        построения иерархии однотипных, очень похожих друг на друга классов.<br> В этом случае наследование от абстрактного класса,
        реализующего поведение объекта по умолчанию может быть полезно, так как позволяет избежать написания повторяющегося кода.<br>
        Во всех остальных случаях лучше использовать интерфейсы.]]>
    </string>

    <string name="core_item_8">
      <![CDATA[  <b> Статический класс </b> - Это вложенный класс, объявленный с использованием ключевого слова static.<br>
        К классам верхнего уровня модификатор static неприменим.]]>
    </string>
    <string name="core_item_9">
      <![CDATA[ <b>Анонимный класс</b> - это вложенный локальный класс без имени, который разрешено декларировать в любом месте обрамляющего класса,
        разрешающем размещение выражений. <br> <br>Создание экземпляра анонимного класса происходит одновременно с его объявлением.<br>
        В зависимости от местоположения анонимный класс ведет себя как статический либо как нестатический
        вложенный класс - в нестатическом контексте появляется окружающий его экземпляр.<br><br>

        Анонимные классы имеют несколько ограничений:<br>

      <b> 1)</b> Их использование разрешено только в одном месте программы - месте его создания;<br><br>
       <b>2)</b> Применение возможно только в том случае, если после порождения экземпляра нет необходимости на него ссылаться;<br><br>
       <b> 3)</b> Реализует лишь методы своего интерфейса или суперкласса, т.е. не может объявлять каких-либо новых методов,
        так как для доступа к ним нет поименованного типа.<br><br>

        Анонимные классы обычно применяются для:<br>

      <b> 1)</b> Cоздания объекта функции (function object), например, реализация интерфейса<b> Comparator</b>;<br><br>
      <b>  2)</b>Cоздания объекта процесса (process object), такого как экземпляры классов <b>Thread, Runnable и подобных</b>;<br><br>
       <b> 3)</b>B статическом методе генерации;<br><br>
       <b> 4)</b>Инициализации открытого статического поля <b>final</b>, которое соответствует сложному перечислению типов,
       когда для каждого экземпляра в перечислении требуется отдельный подкласс.<br><br>]]>
    </string>
    <string name="core_item_10">
      <![CDATA[  <b>Local inner class (Локальный класс) </b>- это вложенный класс, который может быть декларирован в любом блоке,
        в котором разрешается декларировать переменные. <br><br>Как и простые внутренние классы <b>(Member inner class)</b>
        локальные классы имеют имена и могут использоваться многократно.<br><br> Как и анонимные классы, они имеют
        окружающий их экземпляр только тогда, когда применяются в нестатическом контексте.<br><br>

        Локальные классы имеют следующие особенности:<br>

       <b>1)</b> Видны только в пределах блока, в котором объявлены;<br><br>

       <b> 2)</b>Не могут быть объявлены как<b> private/public/protected</b> или <b>static</b>;<br><br>

     <b> 3)</b>  Не могут иметь внутри себя статических объявлений методов и классов,
        но могут иметь финальные статические поля, проинициализированные константой;<br><br>

      <b> 4)</b> Имеют доступ к полям и методам обрамляющего класса;<br><br>

      <b> 5) </b>Могут обращаться к локальным переменным и параметрам метода, если они объявлены с модификатором <b>final</b>.<br><br>]]>
    </string>
</resources>